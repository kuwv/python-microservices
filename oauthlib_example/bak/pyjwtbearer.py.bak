from typing import Any, Dict, Optional, List

from fastapi import HTTPException
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from jose import jwt, jwk, JWTError
from jose.utils import base64url_decode
from pydantic import BaseModel
from starlette.requests import Request
from starlette.status import HTTP_403_FORBIDDEN
import jwt as pyjwt
import json

# https://tools.ietf.org/html/rfc7517#page-5
JWK = Dict[str, Any]


class JWKS(BaseModel):
    keys: List[JWK]


class JWTAuthorizationCredentials(BaseModel):
    jwt_token: str
    header: Dict[str, str]
    claims: Dict[str, str]
    signature: str
    message: str


class JWTBearer(HTTPBearer):
    def __init__(self, jwks: JWKS, auto_error: bool = True):
        super().__init__(auto_error=auto_error)
        self.kid_to_jwk = {jwk["kid"]: jwk for jwk in jwks.keys}

        self.public_keys = {}
        for key in jwks.keys:
            kid = key['kid']
            self.public_keys[kid] = pyjwt.algorithms.RSAAlgorithm.from_jwk(json.dumps(key))

    def verify_jwk_token(self, jwt_credentials: JWTAuthorizationCredentials) -> bool:
        try:
            public_key = self.kid_to_jwk[jwt_credentials.header["kid"]]
        except KeyError:
            raise HTTPException(
                status_code=HTTP_403_FORBIDDEN, detail="JWK public key not found"
            )

        key = jwk.construct(public_key)
        print(key)
        decoded_signature = base64url_decode(jwt_credentials.signature.encode())
        print(decoded_signature)

        # PyJWT
        pskey = pyjwt.algorithms.RSAAlgorithm.from_jwk(json.dumps(public_key))
        # print(pskey)
        # kid = pyjwt.get_unverified_header(jwt_credentials)['kid']
        # key = public_keys[kid]
        # print(jwt_credentials.jwt_token)
        try:
            return pyjwt.decode(jwt_credentials.jwt_token, key=pskey, algorithms=['RS256'])
        except pyjwt.ExpiredSignatureError:
            raise HTTPException(
                status_code=HTTP_403_FORBIDDEN, detail="Authentication token has expired"
            )

    async def __call__(self, request: Request) -> Optional[JWTAuthorizationCredentials]:
        credentials: HTTPAuthorizationCredentials = await super().__call__(request)

        if credentials:
            if not credentials.scheme == "Bearer":
                raise HTTPException(
                    status_code=HTTP_403_FORBIDDEN, detail="Wrong authentication method"
                )

            jwt_token = credentials.credentials

            message, signature = jwt_token.rsplit(".", 1)

            try:
                jwt_credentials = JWTAuthorizationCredentials(
                    jwt_token=jwt_token,
                    header=pyjwt.get_unverified_header(jwt_token),
                    claims=pyjwt.decode(jwt_token, verify=False),
                    signature=signature,
                    message=message,
                )
            except JWTError:
                raise HTTPException(status_code=HTTP_403_FORBIDDEN, detail="JWK invalid")

            if not self.verify_jwk_token(jwt_credentials):
                raise HTTPException(status_code=HTTP_403_FORBIDDEN, detail="JWK invalid")

            return jwt_credentials
