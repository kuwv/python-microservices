---
- hosts: all
  connection: local

  tasks:
    - block:
        - name: Setup network for KeyCloak / Kong
          docker_network:
            name: "{{ item }}"
          loop:
            - kong-net
            - keycloak-net

        - name: Setup volumes for KeyCloak / Kong
          docker_volume:
            name: "{{ item }}"
          loop:
            - kong-datastore
            - keycloak-datastore
      tags:
        - always

    - block:
        - name: Build Kong OIDC image
          docker_image:
            name: kong:0.14-centos-oidc
            source: build
            build:
              pull: yes
              path: ../kong

        - name: Start Kong PostgreSQL DB
          docker_container:
            name: kong-db
            image: postgres:9.6
            networks_cli_compatible: true
            volumes:
              - kong-datastore:/var/lib/postgresql/data
            networks:
              - name: kong-net
            exposed_ports:
              - '15432:5432'
            env:
              POSTGRES_DB: api-gw
              POSTGRES_USER: kong
              # POSTGRES_PASSWORD:
            state: started
          register: kong_db_register

        - name: Wait for postgres to accept connections
          wait_for:
            host: "{{ kong_db_register['ansible_facts']\
              ['docker_container']\
              ['NetworkSettings']\
              ['Networks']\
              ['kong-net']\
              ['IPAddress'] }}"
            port: 5432
            state: started
            connect_timeout: 1
            timeout: 30
          register: kong_db_running
          until: kong_db_running is success
          retries: 10

        - name: Run Kong database migration
          docker_container:
            name: kong-migration
            image: kong:0.14-centos-oidc
            networks_cli_compatible: true
            networks:
              - name: kong-net
                links:
                  - kong-db
            detach: "{{ sso_debug | d(omit) }}"
            command: kong migrations up
            # auto_remove: true
            env:
              KONG_DATABASE: postgres
              KONG_PG_HOST: kong-db
              KONG_PG_PORT: '5432'
              KONG_PG_DATABASE: api-gw
          tags:
            - migrate

        - name: Start Kong Service
          docker_container:
            name: kong
            image: kong:0.14-centos-oidc
            networks_cli_compatible: true
            networks:
              - name: kong-net
                links:
                  - kong-db
            ports:
              - '8000:8000' # Listener
              - '8001:8001' # Admin API
              - '8443:8443' # Listener  (SSL)
              - '8444:8444' # Admin API (SSL)
            env:
              KONG_DATABASE: postgres
              KONG_PG_HOST: kong-db
              KONG_PG_PORT: '5432'
              KONG_PG_DATABASE: api-gw
              KONG_PROXY_ACCESS_LOG: /dev/stdout
              KONG_ADMIN_ACCESS_LOG: /dev/stdout
              KONG_PROXY_ERROR_LOG: /dev/stderr
              KONG_ADMIN_ERROR_LOG: /dev/stderr
              KONG_PROXY_LISTEN: '0.0.0.0:8000, 0.0.0.0:8443 ssl'
              KONG_ADMIN_LISTEN: '0.0.0.0:8001, 0.0.0.0:8444 ssl'
              KONG_PLUGINS: oidc
            recreate: true
          register: kong_register

        - name: Wait for kong to accept connections
          wait_for:
            host: "{{ kong_register['ansible_facts']\
              ['docker_container']\
              ['NetworkSettings']\
              ['Networks']\
              ['kong-net']\
              ['IPAddress'] }}"
            port: 8000
            state: started
            connect_timeout: 1
            timeout: 30
          register: kong_running
          until: kong_running is success
          retries: 10
      tags:
        - kong

    - block:
        - name: Start KeyCloak DB
          docker_container:
            name: keycloak-db
            image: postgres:9.6
            volumes:
              - keycloak-datastore:/var/lib/postresql/data
            networks_cli_compatible: true
            networks:
              - name: keycloak-net
            exposed_ports:
              - '25432:5432'
            env:
              POSTGRES_DB: keycloak
              POSTGRES_USER: keycloak
              POSTGRES_PASSWORD: password
          register: keycloak_db_register

        - name: Wait for KeyCloak DB to accept connections
          wait_for:
            host: "{{ keycloak_db_register['ansible_facts']\
              ['docker_container']\
              ['NetworkSettings']\
              ['Networks']\
              ['keycloak-net']\
              ['IPAddress'] }}"
            port: 5432
            state: started
            connect_timeout: 1
            timeout: 30
          register: keycloak_db_running
          until: keycloak_db_running is success
          retries: 10

        - name: Start KeyCloak
          docker_container:
            name: keycloak
            image: jboss/keycloak:4.5.0.Final
            networks_cli_compatible: true
            networks:
              - name: keycloak-net
                links:
                  - keycloak-db
            ports:
              - '8180:8080'
            env:
              DB_VENDOR: POSTGRES
              DB_ADDR: keycloak-db
              DB_PORT: '5432'
              DB_DATABASE: keycloak
              DB_USER: keycloak
              DB_PASSWORD: password
              KEYCLOAK_USER: admin
              KEYCLOAK_PASSWORD: admin
          register: keycloak_register

        - name: Wait for KeyCloak to accept connections
          wait_for:
            host: "{{ keycloak_register['ansible_facts']\
              ['docker_container']\
              ['NetworkSettings']\
              ['Networks']\
              ['keycloak-net']\
              ['IPAddress'] }}"
            port: 8080
            state: started
            connect_timeout: 1
            timeout: 30
          register: keycloak_running
          until: keycloak_running is success
          retries: 10
      tags:
        - keycloak

    - block:
        - name: Verify OIDC plugin is loaded in Kong
          uri:
            url: http://localhost:8001
            return_content: yes
          register: plugin_register
          until: plugin_register.json.plugins.available_on_server.oidc|d(false)
          retries: 10

        - name: Get KeyCloak address
          set_fact:
            keycloak_addr: "{{ keycloak_register['ansible_facts']\
              ['docker_container']\
              ['NetworkSettings']\
              ['Networks']\
              ['keycloak-net']\
              ['IPAddress'] }}"

        - block:
            - name: Check if mock service is loaded in Kong
              uri:
                url: http://localhost:8001/services/mock-service
              register: service_register
          rescue:
            - name: Add mock service to Kong
              uri:
                url: http://localhost:8001/services
                method: POST
                body_format: form-urlencoded
                body:
                  name: mock-service
                  url: http://mockbin.org/request
                return_content: yes
                status_code: 201
              register: service_register

        - name: Retrieve mock service ID
          set_fact:
            sid: "{{ service_register.json.id }}"

        - block:
            - name: Check if mock route is loaded in Kong
              uri:
                url: http://localhost:8000/mock
              register: route_register
          rescue:
            - name: Register route in Kong
              uri:
                url: http://localhost:8001/routes
                method: POST
                body_format: form-urlencoded
                body:
                  service.id: "{{ sid }}"
                  paths[]: /mock
                return_content: yes
                status_code: 201
              register: route_register

        - name: Authenticate with KeyCloak
          uri:
            url: "http://localhost:8180/auth/realms/master\
              /protocol/openid-connect/token"
            method: POST
            body_format: form-urlencoded
            body:
              client_id: admin-cli
              username: admin
              password: admin
              grant_type: password
            return_content: yes
          register: sso_auth

        - name: Create client secret
          set_fact:
            sso_secret: >-
              {{ lookup('password',
              '/dev/null length=32 chars=ascii_letters,digits') }}

        - name: Set KeyCloak access token
          set_fact:
            sso_bearer_token: "{{ sso_auth.json.access_token }}"

        - name: Create KeyCloak client
          keycloak_client:
            auth_client_id: admin-cli
            auth_keycloak_url: http://localhost:8180/auth
            auth_realm: master
            auth_username: admin
            auth_password: admin
            client_id: kong
            id: "{{ sid }}"
            protocol: openid-connect
            public_client: false
            root_url: http://localhost:8000
            redirect_uris:
              - /mock/*
            direct_access_grants_enabled: true
            standard_flow_enabled: true
            client_authenticator_type: client-secret
            secret: "{{ sso_secret }}"
            state: present
          register: client_register

        - block:
            - name: Check if realm user exists
              uri:
                url: "http://localhost:8180/auth/admin/realms/master\
                  /users?username=johnson"
                headers:
                  Authorization: "bearer {{ sso_bearer_token }}"
                return_content: yes
              register: user_register
          rescue:
            - name: Create realm user
              uri:
                url: http://localhost:8180/auth/admin/realms/master/users
                method: POST
                headers:
                  Authorization: "bearer {{ sso_bearer_token }}"
                body_format: json
                body:
                  username: johnson
                  email: johnson@localhost
                  enabled: 'true'
                  emailVerified: 'true'
                  credentials:
                    - type: password
                      value: password
                status_code: 201
                return_content: yes
              register: user_register

        - block:
            - name: Check if kong is registered with keycloak
              uri:
                url: http://localhost:8001/plugins?name=oidc
                return_content: yes
              register: kong_bind_register
          rescue:
            - name: Configure kong with keycloak
              uri:
                url: http://localhost:8001/plugins
                method: POST
                body_format: json
                body:
                  name: oidc
                  config.client_id: kong
                  config.client_secret: "{{ sso_secret }}"
                  config.discovery: "http://{{ keycloak_addr }}:8180/auth\
                    /realms/master/.well-known/openid-configuration"
                status_code: 201
                return_content: yes
              register: kong_bind_register
      tags:
        - endpoint

# TODO: In case any commands need to be run within the container
# - hosts: kong
#   connection: docker
#   gather_facts: false
#   tasks:
#     - raw: ls
