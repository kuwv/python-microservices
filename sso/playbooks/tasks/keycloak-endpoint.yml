---
- block:
    - name: Authenticate with KeyCloak
      uri:
        url: "{{ svc_auth_baseurl }}/auth/realms/{{ auth_realm }}/protocol\
          /openid-connect/token"
        method: POST
        body_format: form-urlencoded
        body:
          client_id: admin-cli
          username: admin
          password: admin
          grant_type: password
        return_content: true
      until: sso_auth.status != -1
      retries: 10
      delay: 1
      register: sso_auth

    - name: Set KeyCloak access token
      set_fact:
        token: "{{ sso_auth.json.access_token }}"

    - name: Create KeyCloak client
      keycloak_client:
        auth_client_id: admin-cli
        auth_keycloak_url: "{{ svc_auth_baseurl }}/auth"
        auth_realm: "{{ auth_realm }}"
        auth_username: admin
        auth_password: admin
        client_id: api-gw
        id: "{{ sid }}"
        protocol: openid-connect
        public_client: false
        root_url: "{{ api_baseurl }}"
        redirect_uris:
          - "{{ api_baseurl }}/mock/*"
        direct_access_grants_enabled: true
        standard_flow_enabled: true
        client_authenticator_type: client-secret
        state: present
      register: client_register

    - name: Retrieve client ID
      set_fact:
        cid: "{{ client_register.proposed.id }}"

    - name: Retrieve client secret
      uri:
        url: "{{ svc_auth_baseurl }}/auth/admin/realms/{{ auth_realm }}\
          /clients/{{ cid }}/client-secret"
        headers:
          Authorization: "bearer {{ token }}"
        return_content: true
      register: client_secret

    - block:
        - name: Check if realm user exists
          uri:
            url: "{{ svc_auth_baseurl }}/auth/admin/realms/{{ auth_realm }}\
              /users?username=johnson"
            headers:
              Authorization: "bearer {{ token }}"
            return_content: true
          register: user_register
          failed_when: user_register.json == []
          no_log: true
      rescue:
        - name: Create realm user
          uri:
            url: "{{ svc_auth_baseurl }}/auth/admin/realms/{{ auth_realm }}\
              /users?realm={{ auth_realm }}"
            method: POST
            headers:
              Accept: application/json
              Authorization: "bearer {{ token }}"
            body_format: json
            body:
              username: johnson
              email: johnson@localhost
              enabled: 'true'
              emailVerified: 'true'
              credentials:
                - type: password
                  value: password
            status_code: 201
            return_content: true
          changed_when: true
          register: user_register

    - block:
        - name: Check if kong is registered with keycloak
          uri:
            url: "{{ svc_admin_api_baseurl }}/plugins?name=oidc"
            return_content: true
          register: endpoint_configure
          failed_when: endpoint_configure.json.data == []
          no_log: true
      rescue:
        - name: Configure kong with keycloak
          uri:
            url: "{{ svc_admin_api_baseurl }}/plugins"
            method: POST
            body_format: json
            body:
              name: oidc
              config:
                client_id: api-gw
                client_secret: "{{ client_secret.json.value }}"
                discovery: "{{ auth_baseurl }}/auth/realms/{{ auth_realm }}\
                  /.well-known/openid-configuration"
            timeout: 300
            status_code: 201
            return_content: true
          changed_when: true
          register: endpoint_configure
  always:
    - name: Logout with KeyCloak
      uri:
        url: "{{ svc_auth_baseurl }}/auth/realms/{{ auth_realm }}/protocol\
          /openid-connect/logout"
        method: POST
        body_format: form-urlencoded
        body:
          client_id: admin-cli
          refresh_token: "{{ sso_auth.json.refresh_token }}"
        status_code: 204
      when: sso_auth.json is defined
...
