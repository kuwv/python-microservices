---
- name: Build Kong OIDC image
  docker_image:
    name: kong:0.14.1-centos-oidc
    source: build
    build:
      pull: true
      path: ../kong

- name: Check if Kong DB is running
  docker_container_info:
    name: kong-db
  register: kong_db_state

- block:
    - name: Start Kong PostgreSQL DB
      docker_container:
        name: kong-db
        image: postgres:9.6
        networks_cli_compatible: true
        volumes:
          - kong-datastore:/var/lib/postgresql/data
        networks:
          - name: kong-net
        exposed_ports:
          - '15432:5432'
        env:
          POSTGRES_DB: api-gw
          POSTGRES_USER: kong
          POSTGRES_PASSWORD: kong
        pull: true
        state: started
      register: kong_db_register

    - name: Wait for postgres to accept connections
      wait_for:
        host: "{{ kong_db_register['ansible_facts']\
          ['docker_container']\
          ['NetworkSettings']\
          ['Networks']\
          ['kong-net']\
          ['IPAddress'] }}"
        port: 5432
        state: started
        connect_timeout: 1
        timeout: 30
      register: kong_db_running
      until: kong_db_running is success
      retries: 10

    - name: Run Kong database migration
      docker_container:
        name: kong-migration
        image: kong:0.14.1-centos-oidc
        networks_cli_compatible: true
        networks:
          - name: kong-net
            links:
              - kong-db
        detach: "{{ sso_debug | d(omit) }}"
        # TODO: bootstrap instead of up for newer versions
        command: kong migrations up
        # TODO: auto_remove requires newer docker python globally
        # auto_remove: true
        env:
          KONG_DATABASE: postgres
          KONG_PG_HOST: kong-db
          KONG_PG_PORT: '5432'
          KONG_PG_DATABASE: api-gw
          KONG_PG_UESR: kong
          KONG_PG_PASSWORD: kong
  when: not kong_db_state.exists

- name: Check if Kong is running
  docker_container_info:
    name: kong
  register: kong_state

- block:
    - name: Start Kong
      docker_container:
        name: kong
        image: kong:0.14.1-centos-oidc
        networks_cli_compatible: true
        networks:
          - name: api-net
            links:
              - webapp
              - keycloak
          - name: kong-net
            links:
              - kong-db
        ports:
          - '8000:8000'  # Listener
          - '8001:8001'  # Admin API
          - '8443:8443'  # Listener (SSL)
          - '8444:8444'  # Admin API (SSL)
        env:
          KONG_DATABASE: postgres
          KONG_PG_HOST: kong-db
          KONG_PG_PORT: '5432'
          KONG_PG_DATABASE: api-gw
          KONG_PG_USER: kong
          KONG_PG_PASSWORD: kong
          KONG_PROXY_ACCESS_LOG: /dev/stdout
          KONG_ADMIN_ACCESS_LOG: /dev/stdout
          KONG_PROXY_ERROR_LOG: /dev/stderr
          KONG_ADMIN_ERROR_LOG: /dev/stderr
          KONG_PROXY_LISTEN: '0.0.0.0:8000, 0.0.0.0:8443 ssl http2'
          KONG_ADMIN_LISTEN: '0.0.0.0:8001, 0.0.0.0:8444 ssl http2'
          KONG_PLUGINS: oidc
        recreate: true
      register: kong_register

    - name: Wait for kong to accept connections
      wait_for:
        host: "{{ kong_register['ansible_facts']\
          ['docker_container']\
          ['NetworkSettings']\
          ['Networks']\
          ['kong-net']\
          ['IPAddress'] }}"
        port: 8000
        state: started
        connect_timeout: 1
        timeout: 30
      register: kong_running
      until: kong_running is success
      retries: 10
  when: not kong_state.exists
...
