---
- hosts: all
  remote_user: root
  connection: local

  tasks:
    - name: Build Kong OIDC image
      docker_image:
        name: kong:0.14-centos-oidc
        source: build
        build:
          pull: yes
          path: ./kong
      tags:
        - build
        - kong

    - name: Setup network for KeyCloak / Kong
      docker_network:
        name: "{{ item }}"
      loop:
        - kong-net
        - keycloak-net

    - name: Setup volumes for KeyCloak / Kong
      docker_volume:
        name: "{{ item }}"
      loop:
        - kong-datastore
        - keycloak-datastore

    - name: Start Kong PostgreSQL DB
      docker_container:
        name: kong-db
        image: postgres:9.6
        networks_cli_compatible: true
        volumes:
          - kong-datastore:/var/lib/postgresql/data
        networks:
          - name: kong-net
        ports:
          - '15432:5432'
        env:
          POSTGRES_DB: api-gw
          POSTGRES_USER: kong
          # POSTGRES_PASSWORD:
        state: started

    - block:
        - name: Run Kong database migration
          docker_container:
            name: kong-migration
            image: kong:0.14-centos-oidc
            networks_cli_compatible: true
            networks:
              - name: kong-net
                links:
                  - kong-db
            detach: "{{ sso_debug | d(omit) }}"
            command: kong migrations up
            auto_remove: true
            env:
              KONG_DATABASE: postgres
              KONG_PG_HOST: kong-db
              KONG_PG_PORT: '5432'
              KONG_PG_DATABASE: api-gw
          tags:
            - migrate

        - name: Start Kong Service
          docker_container:
            name: kong
            image: kong:0.14-centos-oidc
            networks_cli_compatible: true
            networks:
              - name: kong-net
                links:
                  - kong-db
            ports:
              - '8000:8000' # Listener
              - '8001:8001' # Admin API
              - '8443:8443' # Listener  (SSL)
              - '8444:8444' # Admin API (SSL)
            env:
              KONG_DATABASE: postgres
              KONG_PG_HOST: kong-db
              KONG_PG_PORT: '5432'
              KONG_PG_DATABASE: api-gw
              KONG_PROXY_ACCESS_LOG: /dev/stdout
              KONG_ADMIN_ACCESS_LOG: /dev/stdout
              KONG_PROXY_ERROR_LOG: /dev/stderr
              KONG_ADMIN_ERROR_LOG: /dev/stderr
              KONG_PROXY_LISTEN: '0.0.0.0:8000, 0.0.0.0:8443 ssl'
              KONG_ADMIN_LISTEN: '0.0.0.0:8001, 0.0.0.0:8444 ssl'
              KONG_PLUGINS: oidc
            recreate: true
      tags:
        - kong

    - block:
        - name: Start KeyCloak DB
          docker_container:
            name: keycloak-db
            image: postgres:9.6
            volumes:
              - keycloak-datastore:/var/lib/postresql/data
            networks_cli_compatible: true
            networks:
              - name: keycloak-net
            ports:
              - '25432:5432'
            env:
              POSTGRES_DB: keycloak
              POSTGRES_USER: keycloak
              POSTGRES_PASSWORD: password

        - name: Start KeyCloak
          docker_container:
            name: keycloak
            image: jboss/keycloak:4.5.0.Final
            networks_cli_compatible: true
            networks:
              - name: keycloak-net
                links:
                  - keycloak-db
            ports:
              - '8180:8080'
            env:
              DB_VENDOR: POSTGRES
              DB_ADDR: keycloak-db
              DB_PORT: '5432'
              DB_DATABASE: keycloak
              DB_USER: keycloak
              DB_PASSWORD: password
              KEYCLOAK_USER: admin
              KEYCLOAK_PASSWORD: admin
      tags:
        - keycloak

    - block:
        - name: Verify OIDC plugin is loaded in Kong
          uri:
            url: http://localhost:8001
            return_content: yes
          register: plugin_register
          failed_when:
            - not plugin_register.json.plugins.available_on_server.oidc

        - block:
            - name: Check if mock service is loaded in Kong
              uri:
                url: http://localhost:8001/services/mock-service
              register: service_register
          rescue:
            - name: Add mock service to Kong
              uri:
                url: http://localhost:8001/services
                method: POST
                body_format: form-urlencoded
                body:
                  name: mock-service
                  url: http://mockbin.org/request
                return_content: yes
                status_code: 201
              register: service_service

        - name: Retrieve mock service ID
          set_fact:
            sid: "{{ service_register.json.id }}"

        - block:
            - name: Check if mock route is loaded in Kong
              uri:
                url: http://localhost:8000/mock
              register: route_register
          rescue:
            - name: Register route in Kong
              uri:
                url: http://localhost:8000/routes
                method: POST
                body_format: form-urlencoded
                body:
                  service.id: "{{ sid }}"
                  paths[]: /mock
                return_content: yes
                status_code: 201
              register: route_register
      tags:
        - mock

    - name: Create KeyCloak client
      keycloak_client:
        auth_client_id: admin-cli
        auth_keycloak_url: http://localhost:8180/auth
        auth_realm: master
        auth_username: admin
        auth_password: admin
        client_id: kong
        state: present
      tags:
        - client

# - hosts: kong
#   connection: docker
#   gather_facts: false
#   tasks:
#     - raw: ls
