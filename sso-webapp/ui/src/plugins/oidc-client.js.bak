import { Log, UserManager, WebStorageStateStore } from 'oidc-client'
import { auth_config } from '@/config'
import { fireLoginEvent, fireLogoutEvent } from '@/event-bus'

export class AuthService {
  constructor() {
    this.ws = new WebStorageStateStore()
    const config = {
      // TODO: Use InMemoryWebStorage or HttpOnly cookies
      // userStore: new WebStorageStateStore({ store: window.localStorage }),
      authority: auth_config.authority,
      client_id: auth_config.client_id,
      redirect_uri: auth_config.redirect_uri,
      post_logout_redirect_uri: auth_config.logout_redirect_uri,
      response_type: 'code',
      scope: auth_config.scope,
      // filterProtocolClaims: true,
      // automaticSilentRenew: true,
      // metadata: {
      //   issuer: auth_config.authority,
      //   authorization_endpoint: auth_config.authorization_endpoint,
      //   userinfo_endpoint: auth_config.userinfo_endpoint,
      //   end_session_endpoint: auth_config.end_session_endpoint,
      //   jwks_uri: auth_config.jwks_uri,
      // }
    }
    this.userManager = new UserManager(config)
    this.userManager.events.addUserLoaded(() => fireLoginEvent())
    this.userManager.events.addUserSignedOut(() => fireLogoutEvent())

    Log.logger = console
    Log.level = Log.DEBUG
  }

  // getAccessToken() {
  //   return this.userManager.getUser().then((data) => {
  //     return data.access_token
  //   })
  // }

  login() {
    // return this.userManager.signinRedirect()
    //  .catch(err => console.log(err))
    return new Promise((resolve, reject) => {
      this.userManager.signinRedirectCallback().then(function() {
        resolve();
      }).catch(function(err) {
        console.debug('User not logged', err);
        this.userManager.signinRedirect().then(function() {
          console.debug("signinRedirect done");
          resolve();
        }).catch(function(err) {
          reject();
          console.error('error while signinRedirect', err);
        })
      })
    })
  }

  logout() {
    return this.userManager.signoutRedirect();
    //  .then(() => console.log('User logged out'))
    //  .catch(err => console.log(err))
  }

  handleLoginRedirect() {
    return this.userManager.signinRedirectCallback()
  }

  handleLogoutRedirect() {
    return this.userManager.signoutRedirectCallback()
  }

  isUserLoggedIn() {
    return new Promise((resolve, reject) => {
      this.userManager.getUser()
        .then(user => {
          if(user === null) {
            resolve(false)
          }
          resolve(true)
        })
        .catch(err => reject(err))
    })
  }

  getProfile() {
    return new Promise((resolve, reject) => {
      this.userManager.getUser()
        .then(user => {
          if(user === null) {
            resolve(null)
          }
          resolve(user.profile)
        })
        .catch(err => reject(err))
    })
  }

  getAccessToken() {
    return new Promise((resolve, reject) => {
      // console.log('Get access token from user')
      this.userManager.getUser()
        .then(user => {
          // console.log('Got access token from user')
          resolve(user.access_token)
        })
        .catch(err => reject(err))
    })
  }
}

export const authService = new AuthService()

/**
 * Default export to register the authentication service in the global Vue instance.
 *
 * This allows us to reference it using "this.$auth" whenever we are inside of a Vue context.
 */
export default {
  install: function(Vue) {
    Vue.prototype.$auth = authService
  }
}
